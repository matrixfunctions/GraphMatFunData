%# Representation of a computation graph
%# Reference implementation of converted Julia 1.7 implementation of Scaling and squaring https://github.com/JuliaLang/julia/blob/697e782ab86bfcdd7fd15550241fe162c51d9f98/stdlib/LinearAlgebra/src/dense.jl#L554 which is based on N. J. Higham. The Scaling and Squaring Method for the Matrix Exponential Revisited. SIAM J. Matrix Anal. Appl., 2005 26:4, 1179-1193 with 8 multiplications and one inverse multiplication. Run compress_graph! before generating code from this graph.
%# Domain: 21.6D
%# Generated by command: GraphMatFunData/src/generate_ref.jl
%# Created: 2021-07-02T09:36:29.328 by user Elias Jarlebring

graph_coeff_type="Float64";

coeff1=0.25;
coeff2=0.0;
C=coeff1*A+coeff2*I;
A2=C*C;
coeff1=3.238237626624e16;
coeff2=1.1873537964288e15;
Ua2=coeff1*I+coeff2*A2;
coeff1=6.476475253248e16;
coeff2=7.7717703038976e15;
Va2=coeff1*I+coeff2*A2;
A4=A2*A2;
coeff1=1.0;
coeff2=1.29060195264e14;
Va3=coeff1*Va2+coeff2*A4;
coeff1=1.0;
coeff2=1.05594705216e13;
Ua3=coeff1*Ua2+coeff2*A4;
coeff1=4.08408e7;
coeff2=16380.0;
Ub2=coeff1*A2+coeff2*A4;
coeff1=1.32324192e9;
coeff2=960960.0;
Vb2=coeff1*A2+coeff2*A4;
A6=A2*A4;
coeff1=1.0;
coeff2=3.352212864e10;
Ua=coeff1*Ua3+coeff2*A6;
coeff1=1.0;
coeff2=6.704425728e11;
Va=coeff1*Va3+coeff2*A6;
coeff1=1.0;
coeff2=1.0;
Ub3=coeff1*Ub2+coeff2*A6;
Ub=Ub3*A6;
coeff1=1.0;
coeff2=1.0;
Uc=coeff1*Ub+coeff2*Ua;
U=C*Uc;
coeff1=1.0;
coeff2=182.0;
Vb3=coeff1*Vb2+coeff2*A6;
Vb=Vb3*A6;
coeff1=1.0;
coeff2=1.0;
V=coeff1*Vb+coeff2*Va;
coeff1=1.0;
coeff2=-1.0;
Z=coeff1*V+coeff2*U;
coeff1=1.0;
coeff2=1.0;
X=coeff1*V+coeff2*U;
P=Z\X;
S1=P*P;
S2=S1*S1;
output0=S2
