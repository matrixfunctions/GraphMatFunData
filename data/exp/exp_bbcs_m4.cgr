%# Representation of a computation graph
%# Reference implementation of An efficient algorithm to compute the exponential of skew-Hermitian matrices for the time integration of the Schr√∂dinger equation, P. Bader, S. Blanes, F. Casas, M. Seydaoglu with m=4 multiplications. Run compress_graph! before generating code from this graph.
%# Domain: Unknown
%# Generated by command: GraphMatFunData/src/generate_ref.jl
%# Created: 2021-07-02T09:36:29.262 by user Elias Jarlebring

graph_coeff_type="Complex{BigFloat}";

coeff1=0.0 + 0.0i;
coeff2=1.0 + 0.0i;
Bb2=coeff1*I+coeff2*A;
coeff1=0.0 + 0.0i;
coeff2=0.0 + 0.1334042730644561252600000000000000000000000000000000000000000000000000000000006i;
Ba4_2=coeff1*I+coeff2*A;
coeff1=0.0 + 0.0i;
coeff2=0.0 + 0.1334042730644561252600000000000000000000000000000000000000000000000000000000006i;
Bb4_2=coeff1*I+coeff2*A;
coeff1=0.0 + 0.0i;
coeff2=1.0 + 0.0i;
Ba2=coeff1*I+coeff2*A;
B2=Ba2*Bb2;
coeff1=1.0 + 0.0i;
coeff2=0.02022602029818310773999999999999999999999999999999999999999999999999999999999995 + 0.0i;
Ba4_3=coeff1*Ba4_2+coeff2*B2;
coeff1=1.0 + 0.0i;
coeff2=0.02022602029818310773999999999999999999999999999999999999999999999999999999999995 + 0.0i;
Bb4_3=coeff1*Bb4_2+coeff2*B2;
coeff1=0.0 + 0.0i;
coeff2=0.0 + 0.0i;
Ba3_2=coeff1*I+coeff2*A;
coeff1=1.0 + 0.0i;
coeff2=1.0 + 0.0i;
Ba3=coeff1*Ba3_2+coeff2*B2;
coeff1=2.695843069153325646889999999999999999999999999999999999999999999999999999999985 + 0.0i;
coeff2=0.0 + 0.05272871327381115107000000000000000000000000000000000000000000000000000000000089i;
Ba5_2=coeff1*I+coeff2*A;
coeff1=1.0 + 0.0i;
coeff2=-0.0989621454884583175400000000000000000000000000000000000000000000000000000000002 + 0.0i;
Ba5_3=coeff1*Ba5_2+coeff2*B2;
coeff1=2.695843069153325646889999999999999999999999999999999999999999999999999999999985 + 0.0i;
coeff2=-0.0 - 1.359109261688692603910000000000000000000000000000000000000000000000000000000001i;
Bb5_2=coeff1*I+coeff2*A;
coeff1=1.0 + 0.0i;
coeff2=-0.0989621454884583175400000000000000000000000000000000000000000000000000000000002 + 0.0i;
Bb5_3=coeff1*Bb5_2+coeff2*B2;
coeff1=-6.267569853502022528450000000000000000000000000000000000000000000000000000000031 + 0.0i;
coeff2=0.0 + 2.521796947120980961399999999999999999999999999999999999999999999999999999999996i;
T2k2=coeff1*I+coeff2*A;
coeff1=1.0 + 0.0i;
coeff2=0.05786296656487001838000000000000000000000000000000000000000000000000000000000006 + 0.0i;
T2k3=coeff1*T2k2+coeff2*B2;
coeff1=0.0 + 0.0i;
coeff2=1.0 + 0.0i;
Bb3_2=coeff1*I+coeff2*A;
coeff1=1.0 + 0.0i;
coeff2=0.0 + 0.0i;
Bb3=coeff1*Bb3_2+coeff2*B2;
B3=Ba3*Bb3;
coeff1=1.0 + 0.0i;
coeff2=-0.0 - 0.006746382411116509990000000000000000000000000000000000000000000000000000000000022i;
Ba4=coeff1*Ba4_3+coeff2*B3;
coeff1=1.0 + 0.0i;
coeff2=-0.0 - 0.006746382411116509990000000000000000000000000000000000000000000000000000000000022i;
Bb4=coeff1*Bb4_3+coeff2*B3;
B4=Ba4*Bb4;
coeff1=1.0 + 0.0i;
coeff2=0.0 + 0.007295441446830946499999999999999999999999999999999999999999999999999999999999884i;
Ba5_4=coeff1*Ba5_3+coeff2*B3;
coeff1=1.0 + 0.0i;
coeff2=1.0 + 0.0i;
Ba5=coeff1*Ba5_4+coeff2*B4;
coeff1=1.0 + 0.0i;
coeff2=-0.0 - 0.07766686408071870343999999999999999999999999999999999999999999999999999999999974i;
T2k4=coeff1*T2k3+coeff2*B3;
coeff1=1.0 + 0.0i;
coeff2=0.0 + 0.01596479463299466665999999999999999999999999999999999999999999999999999999999992i;
Bb5_4=coeff1*Bb5_3+coeff2*B3;
coeff1=1.0 + 0.0i;
coeff2=0.0 + 0.0i;
T2k5=coeff1*T2k4+coeff2*B4;
coeff1=1.0 + 0.0i;
coeff2=1.0 + 0.0i;
Bb5=coeff1*Bb5_4+coeff2*B4;
B5=Ba5*Bb5;
coeff1=1.0 + 0.0i;
coeff2=1.0 + 0.0i;
T2k7=coeff1*T2k5+coeff2*B5;
output0=T2k7
